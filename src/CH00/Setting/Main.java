package CH00.Setting;
// 제공되는 코드 사용 방법
// 1. File -> Open -> 해당 프로젝트 열기
// 2. 새로 만든 프로젝트에 소스코드 복사 (이 때 클래스명과 파일명이 일치하는지 확인)
// 3. 소스코드가 있는 폴더를 우클릭 -> 인텔리제이로 열기

// 툴 사용 방법 소개
// 1. font 크기 변경 방법 : File > Setting > Editor > Font에서 변경
// 2. Keymap(단축키) 변경 방법 : File > Setting > Keymap에서 변경. 익숙한 IDE 환경의 단축키나 플러그인의 키맵 사용 가능

// 폴더 트리
// - 프로젝트 : 개발자가 만든 프로젝트
// - 외부 라이브러리 : 개발자가 설치한 JDK에서 기본적으로 제공해주는 여러가지 기능들의 모음집
// - .idea, .iml : 프로젝트의 기본 설정. 삭제해도 무방하나 해당 경우 JDK에 대한 설정을 다시 해야한다.
// - src : 개발자가 작성한 .java 파일이 위치함
// - out : src 내 .java 파일을 실행하면 생성되는 폴더, 실행한 파일이 컴파일된 .class 파일이 위치함

public class Main {
    public static void main(String[] args) {
        // 한 줄 주석은 슬래시를 두번(//) 사용하여 작성한다.
        // App을 실행할 때 실행되지 않으며, 코드를 작성할 때 필요한 메시지를 남기는 용도로 사용한다.
        System.out.println("Hello Java!"); // 실제 실행되는 문장의 맨 뒤에는 세미콜론(;)을 꼭 빠뜨리지 말고 작성한다.

        /*
        여러 줄 주석은
        슬래시(/)+별(*)을 사용하여 작성한다.
        여러 줄 주석의 작성을 시작할 때는 슬래시+별, 작성을 종료할 때는 별+슬래시로 열고 닫는다.
        */

        // 디버깅 사용 방법
        // - 디버깅하려는 코드의 라인 수 옆을 클릭하여 중단점(Breakpoint)을 설정한다.
        // - 이후 앱을 디버그 모드로 실행하면 특정 코드에 중단점이 찍힌 경우, 해당 코드에서 App의 실행이 중지된다.
        // - 아래 Debugger 메뉴에서 App의 코드를 실행하는데 필요한 자원들에 대한 정보를 확인/수정(Set Value)하여 디버깅할 수 있다.
        // - Step Over : 현재 줄의 코드를 실행하고, 만약 메서드 호출이 포함되어 있어도 해당 메서드 내부로 들어가지 않고 다음 줄로 이동.
        // - Step Into : 현재 실행할 코드에 호출되는 메서드가 있다면 해당 메서드 내부로 들어가 한 줄씩 실행.
        // - Step Out : 현재 실행 중인 메서드의 나머지 코드를 모두 실행한 후, 그 메서드를 호출한 지점으로 돌아감.
        // - Run to Cursor : 커서를 둔 위치의 코드까지 프로그램을 중단하지 않고 실행함.

        System.out.println("이번 수업을 마칩니다.");
        System.out.println("수고하셨습니다.");
    }
}
